import asyncio
import logging
import os

import aiohttp
import betterlogging as bl
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message


test_router = Router()
test_router.message.filter()

admin_id = 1323485709  # tg_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
token = "6683524657:AAHuS_elwd8Pgb91mcHYMVUpkbSknY0n1Lw"  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_KEY = '27510470351b6b262783bf56417f17912f1d87712535cc642be1e904ef27947e'
folder_files = r"telegram_bot\VirusTotal\VirusTotal\files"
MESSAGE_HELP = '''
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/git - —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –≤ GitHub
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/virus - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑–∞—Ö –∏ –≤–∏—Ä—É—Å–∞—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥'''
MESSAGE_VIRUS = '''
‚Ä¢ <b>–í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ.</b> –ö —Ç–∞–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è: –≤–∏—Ä—É—Å—ã —à–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫–∏, —Ä–∞–∑–ª–∏—á–Ω—ã–µ —á–µ—Ä–≤–∏, —Ç—Ä–æ—è–Ω—ã, —Å—Ç–∏–ª–µ—Ä—ã, –º–∞–π–Ω–µ—Ä—ã –∏ —à–ø–∏–æ–Ω—Å–∫–æ–µ  –ü–û.
–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –ø–æ–¥–æ–±–Ω–æ–≥–æ –≤–∏–¥–∞ –∞—Ç–∞–∫ ‚Äì –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –Ω–∏—á–µ–≥–æ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤. –î–∞–∂–µ –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–π—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ñ–∞–π–ª—ã –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏.\n 
–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞: https://en.wikipedia.org/wiki/Malware

‚Ä¢ <b>–û–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.</b> –ï—Å–ª–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É–≥—Ä–æ–∑—ã –Ω–∞ —Å–∞–º–∏—Ö —Å–∞–π—Ç–∞—Ö, —Ç–æ —Å–∞–º—ã–º–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —è–≤–ª—è—é—Ç—Å—è: 
–æ–ø–∞—Å–Ω—ã–µ —Å–∞–π—Ç—ã (–∑–∞–≥—Ä—É–∂–∞—é—Ç –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ–Ω—É–∂–Ω—ã–π –∏–ª–∏ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–π —Å–æ—Ñ—Ç), —Å–∞–π—Ç—ã —Å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º http, —Å–∞–π—Ç—ã –±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–∞–π—Ç—ã, —Å–æ–±–∏—Ä–∞—é—â–∏–µ –æ –≤–∞—Å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–æ—Ç –≤–∞—à–µ–≥–æ ip –∞–¥—Ä–µ—Å–∞ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–µ–≥–æ —ç–∫—Ä–∞–Ω–∞/–º–æ–Ω–∏—Ç–æ—Ä–∞) –±–µ–∑ –≤–∞—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. 
–°–ø–æ—Å–æ–± –∑–∞—â–∏—Ç—ã –æ—Ç —Ç–∞–∫–æ–≥–æ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ–π ‚Äì –Ω–µ –ø–æ—Å–µ—â–∞—Ç—å –Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã, –Ω–µ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞  —Å–∞–π—Ç–∞—Ö —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º http –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤–æ–æ–±—â–µ, —É–¥–∞–ª—è—Ç—å cookie —Å —Å–∞–π—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –¥–∞—Ç—å –∏—Ö —Å–≤–æ—Ä–æ–≤–∞—Ç—å.\n 
–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞: 
https://en.wikipedia.org/wiki/HTTP
https://www.kaspersky.ru/resource-center/definitions/what-is-a-ssl-certificate
https://ru.wikipedia.org/wiki/Cookie

‚Ä¢ <b>–§–∏—à–∏–Ω–≥.</b>–§–∏—à–∏–Ω–≥ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ–π –∞—Ç–∞–∫–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏. 
–†–∞–∑–ª–∏—á–∏—Ç—å –ø–æ–¥–¥–µ–ª—å–Ω—ã–π —Å–∞–π—Ç –∏–ª–∏ –ø–∏—Å—å–º–æ –±—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ, –Ω–æ –Ω–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ URL —Å–∞–π—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö. 
–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞, –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.\n 
–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞:
https://ru.wikipedia.org/wiki/Phishing
'''

async def upload_file(api_key, file_path):
    url = "https://www.virustotal.com/api/v3/files"
    headers = {
        "accept": "application/json",
        "x-apikey": api_key
    }

    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, data={'file': open(file_path, 'rb')}) as response:
            data = await response.json()
            file_url = data['data']['links']['self']

        async with session.get(file_url, headers=headers) as response:
            result = (await response.json())['data']['attributes']['results']

    return result


@test_router.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç-—Å–∫–∞–Ω–µ—Ä –Ω–∞ –≤–∏—Ä—É—Å—ã Safe Keeper! " + 
                         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20 –ú–ë –∏ –±–æ—Ç –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–µ—Ç –µ–≥–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≥—Ä–æ–∑.")
    
@test_router.message(Command('help'))
async def help(message: Message):
    await message.answer(MESSAGE_HELP)
    
@test_router.message(Command('git'))
async def help(message: Message):
    await message.answer("üîó–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É –±–æ—Ç–∞ –Ω–∞ GitHub: ...")

@test_router.message(Command('info'))
async def help(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ:\n\n' + 
                         '"–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –≤–∏—Ä—É—Å–æ–≤, —Ö–∞–∫–µ—Ä–æ–≤ –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞."\n\n' + 
                         '–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏ –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ python —Å –ø–æ–º–æ—â—å—é —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ aiogram.\n\n' + 
                         '–£–¥–∞—á–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!')

@test_router.message(Command('virus'))
async def help(message: Message):
    await message.answer(MESSAGE_VIRUS)


@test_router.message(F.document)
async def document_processing(message: Message):
    file_size_b = message.document.file_size
    file_size_mb = file_size_b / 1048576
    file_size_kb = file_size_b / 1024
    file_name = message.document.file_name
    if file_size_mb > 20:
        return await message.answer("‚ùå–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 20 –ú–±–∞–π—Ç.")

    await message.answer("‚úÖ–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    file = await message.bot.get_file(message.document.file_id)
    file_path = file.file_path
    file_path_ = folder_files + str(message.from_user.id) + file_name
    await message.bot.download_file(file_path, file_path_)

    result = await upload_file(API_KEY, file_path_)

    if round(file_size_mb) > 0:
        file_size = str(round(file_size_mb, 2)) + " –ú–±."
    elif round(file_size_kb) > 0:
        file_size = str(round(file_size_kb, 2)) + " –ö–±."
    else:
        file_size = str(file_size_b) + " –ë–∞–π—Ç."

    counter = 0
    for i in result:
        if result.get(i).get('result'):
            counter += 1
    if counter > 0:
        await message.answer(f"<b>üëÅ‚Äçüó®–ù–∞–π–¥–µ–Ω—ã –≤–∏—Ä—É—Å—ã!</b>\n\n"
                             f"üì°–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω—Ç–∏–≤–∏—Ä–æ—Å–æ–≤ –Ω–∞—à–µ–¥—à–∏—Ö —É–≥—Ä–æ–∑—É: {counter} / {len(result)}\n\n"
                             f"üîí–¢–∏–ø —Ñ–∞–π–ª–∞: {file_name.split('.')[-1]}\n\n"
                             f"üìù–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " + file_size)
    else:
        await message.answer("<b>üëÅ‚Äçüó®–£–≥—Ä–æ–∑—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.</b>\n\n"
                             f"üîí–¢–∏–ø —Ñ–∞–π–ª–∞: {file_name.split('.')[-1]}\n\n"
                             f"üìù–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " + file_size)

    os.remove(file_path_)


@test_router.message()
async def confused(message: Message):
    await message.answer("–û–∂–∏–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç.")


def setup_logging():
    log_level = logging.INFO
    bl.basic_colorized_config(level=log_level)

    logging.basicConfig(
        level=logging.INFO,
        format="%(filename)s:%(lineno)d #%(levelname)-8s [%(asctime)s] - %(name)s - %(message)s",
    )
    logger = logging.getLogger(__name__)
    logger.info("Starting bot")


async def main():
    setup_logging()

    bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_routers(test_router)

    await bot.send_message(chat_id=admin_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())

    except (KeyboardInterrupt, SystemExit):
        logging.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
